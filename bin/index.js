#!/usr/bin/env node
// ÊåáÂÆöËÑöÊú¨ÁöÑÊâßË°åÁ®ãÂ∫è

// ÂºïÂÖ•‰æùËµñ
const program = require("commander");
const chalk = require("chalk");
const path = require("path");
const inquirer = require("inquirer");
const packages = require("../package.json");
const shell = require("shelljs");

// ÂÆö‰πâÁâàÊú¨Âè∑‰ª•ÂèäÂëΩ‰ª§ÈÄâÈ°π
program
  .version(packages.version)
  .option("-v --version", "get cli version")
  .option("-i --init", "init a project");

program.parse(process.argv);

if (program.init) {
  console.log("");
  console.log("");
  console.log(" =======================================================");
  console.log(` |                                                     |`);
  console.log(
    chalk.white(` |    Ê¨¢Ëøé‰ΩøÁî®`),
    chalk.cyanBright(" node-proxy-cli ") + " ÊûÑÂª∫Â∑•ÂÖ∑,",
    chalk.yellow("Á•ù‰Ω†Â•ΩËøê"),
    " -------  ‰πà‰πàÂìí ^_^"
  );
  console.log(` |                                                     |`);
  console.log(" =======================================================");
  console.log("");
  console.log("");

  inquirer
    .prompt([
      {
        type: "String",
        name: "name",
        message: `${chalk.yellow("ÊÇ®È°πÁõÆÁöÑÂêçÁß∞")}(‰∏çË¶ÅÂÖ®Êï∞Â≠ó) :`,
        default: "oyo-work",
        validate: function(input) {
          if (/^\d+$/.test(input)) return false;

          return true;
        }
      },
      {
        type: "String",
        name: "git",
        message: chalk.yellow("ÊÇ®È°πÁõÆÁöÑgitÂú∞ÂùÄ: ")
      },
      {
        type: "String",
        name: "distPath",
        message: chalk.yellow("ÊÇ®ÊâìÂåÖÂêéÈùôÊÄÅÊñá‰ª∂ÁõÆÂΩï: "),
        default: "dist"
      },
      // {
      //   type: "String",
      //   name: "branch",
      //   message: chalk.yellow("ÊÇ®ÊÉ≥ÊãâÂèñÁöÑÂàÜÊîØÂêç: "),
      //   default: "master"
      // },
      {
        type: "rawlist",
        name: "type",
        message: chalk.yellow("ÊÇ®È°πÁõÆÁöÑÊ∏≤ÊüìÊñπÂºè: "),
        choices: [
          {
            value: "static",
            name: "üê∏  H5ÈùôÊÄÅËµÑÊ∫ê"
          },
          {
            value: "umiSsr",
            name: "üêù  umSSrÊ∏≤Êüì"
          },
          {
            value: "vueSsr",
            name: "üçé  vueSSrÊ∏≤Êüì"
          }
        ]
      }
    ])
    .then(answers => {
      const { name, git, type, distPath } = answers;
      const productPath = path.join(__dirname, "../");
      const gulpShell = `${productPath}/node_modules/.bin/gulp ${type} --name ${name} --git ${git} --distPath ${distPath} --cwd ${process.cwd()} --gulpfile ${path.join(
        productPath,
        "gulpfile.js"
      )}`;
      shell.exec(gulpShell);

      console.log("ÁªìÊûú‰∏∫:");
      console.log(answers);
    });
}

// if (program.init) {
// // Ëé∑ÂèñÂ∞ÜË¶ÅÊûÑÂª∫ÁöÑÈ°πÁõÆÊ†πÁõÆÂΩï
// var projectPath = path.resolve(program.init);
// // Ëé∑ÂèñÂ∞ÜË¶ÅÊûÑÂª∫ÁöÑÁöÑÈ°πÁõÆÂêçÁß∞
// var projectName = path.basename(projectPath);
// console.log(projectPath, projectName);
// console.log(`Start to init a project in ${chalk.green(projectPath)}`);
// // Ê†πÊçÆÂ∞ÜË¶ÅÊûÑÂª∫ÁöÑÈ°πÁõÆÂêçÁß∞ÂàõÂª∫Êñá‰ª∂Â§π
// fs.ensureDirSync(projectName);
// // Ëé∑ÂèñÊú¨Âú∞Ê®°Âùó‰∏ãÁöÑdemo1ÁõÆÂΩï
// var cwd = path.join(__dirname, "./templates");
// console.log(cwd);
// // ‰ªédemo1ÁõÆÂΩï‰∏≠ËØªÂèñÈô§node_modulesÁõÆÂΩï‰∏ãÁöÑÊâÄÊúâÊñá‰ª∂Âπ∂Á≠õÈÄâÂ§ÑÁêÜ
// vfs
//   .src(["**/*", "!node_modules/**/*"], { cwd: cwd, dot: true })
//   .pipe(
//     through.obj(function(file, enc, callback) {
//       if (!file.stat.isFile()) {
//         return callback();
//       }
//       this.push(file);
//       return callback();
//     })
//   )
//   // Â∞Ü‰ªédemo1ÁõÆÂΩï‰∏ãËØªÂèñÁöÑÊñá‰ª∂ÊµÅÂÜôÂÖ•Âà∞‰πãÂâçÂàõÂª∫ÁöÑÊñá‰ª∂Â§π‰∏≠
//   .pipe(vfs.dest(projectPath))
//   .on("end", function() {
//     console.log("Installing packages...");
//     // Â∞ÜnodeÂ∑•‰ΩúÁõÆÂΩïÊõ¥ÊîπÊàêÊûÑÂª∫ÁöÑÈ°πÁõÆÊ†πÁõÆÂΩï‰∏ã
//     process.chdir(projectPath);
//     // ÊâßË°åÂÆâË£ÖÂëΩ‰ª§
//     require("./lib/install");
//   })
//   .resume();
// }

// const unloadChar = "-";
// const loadedChar = "=";

// if (program.gg) {
//   rl.question("È°πÁõÆÂêçÁß∞?", answer => {
//     console.log(answer);
//     let i = 0;
//     let time = setInterval(() => {
//       console.log(i);
//       if (i > 100) {
//         clearInterval(time);
//         readline.cursorTo(process.stdout, 0, 0);
//         readline.clearScreenDown(process.stdout);
//         console.log(`hello ${answer}`);
//         process.exit(0);
//         return;
//       }
//       readline.cursorTo(process.stdout, 0, 1);
//       readline.clearScreenDown(process.stdout);
//       renderProgress("saying hello", i);
//       i++;
//     }, 200);
//   });
// }

// function renderProgress(text, step) {
//   const PERCENT = Math.round(step);
//   const COUNT = 2;
//   const unloadStr = new Array(COUNT * (100 - step)).fill(unloadChar).join("");
//   const loadedStr = new Array(COUNT * step).fill(loadedChar).join("");
//   process.stdout.write(
//     `${text}:„Äê${chalk.green(loadedStr)}${unloadStr}|${PERCENT}%„Äë`
//   );
// }
